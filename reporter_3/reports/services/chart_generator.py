import pandas as pd
import plotly.express as px
from io import StringIO
from chat.services import ollama_service

# --- SECURITY WARNING ---
# This implementation uses exec() to run code generated by an LLM. This is
# inherently risky in a production environment. While we are scoping the
# execution to limit its capabilities, a sufficiently clever or malicious
# prompt could potentially find a way to execute harmful code.
# For a real-world application, this should be run in a sandboxed
# environment (e.g., a separate Docker container with no file system access).

def generate_chart_from_data(data_str: str, user_request: str, chat_model: str):
    """
    Generates a Plotly chart HTML from string data (e.g., CSV format)
    by having an LLM write the necessary Python code.

    Args:
        data_str (str): A string containing the data, ideally in CSV format.
                        This comes from our file_processor service.
        user_request (str): The user's natural language request for a chart.
        chat_model (str): The Ollama model to use for code generation.

    Returns:
        str: The HTML representation of the chart, or an error message string.
    """
    
    # We only need the header and a few rows to give the LLM context.
    # This saves tokens and processing time.
    data_sample = "\n".join(data_str.splitlines()[:10])

    system_prompt = f"""
You are an expert Python data scientist who specializes in Plotly.
Your task is to write a Python code snippet to generate a chart based on user request.

**RULES:**
1.  The data is already loaded into a pandas DataFrame named `df`.
2.  You can ONLY use the `pandas` library (as `pd`) and the `plotly.express` library (as `px`).
3.  Your code must not contain any `import` statements.
4.  Your code must not read or write any files.
5.  The final line of your code MUST assign the Plotly figure object to a variable named `chart_figure`.
    Example: `chart_figure = px.bar(df, x='Category', y='Value')`

**DATA SAMPLE (first few rows):**

**USER CHART REQUEST:**
"{user_request}"

Now, provide ONLY the Python code to generate the requested chart. Do not include explanations,
markdown formatting like ```python, or any text other than the code itself.
"""
    try:
        # Step 1: Ask the LLM to generate the Python code for the chart
        python_code = ollama_service.generate_response(
            model=chat_model,
            prompt=system_prompt,
            stream=False
        )

        if not python_code or "px." not in python_code:
            return "<div class='alert alert-warning'>Could not generate valid chart code for this request.</div>"

        # Step 2: Prepare a safe environment and execute the generated code
        # Convert the full string data to a pandas DataFrame
        df = pd.read_csv(StringIO(data_str))

        # Define the limited scope for the exec() call to enhance security
        scope = {
            "pd": pd,
            "px": px,
            "df": df
        }
        
        # Execute the code. The result will be stored in the 'scope' dictionary.
        exec(python_code, scope)

        # Step 3: Retrieve the figure and convert it to HTML
        chart_figure = scope.get("chart_figure")

        if chart_figure and hasattr(chart_figure, 'to_html'):
            # include_plotlyjs='cdn' makes the chart interactive without extra setup
            chart_html = chart_figure.to_html(full_html=False, include_plotlyjs='cdn')
            return chart_html
        else:
            return "<div class='alert alert-danger'>The generated code did not create a valid chart figure.</div>"

    except Exception as e:
        print(f"Error during chart generation: {e}")
        print(f"Problematic code was:\n{python_code}")
        return f"<div class='alert alert-danger'>An error occurred while creating the chart: {e}</div>"